package com.amazonaws.starport.vulnerabilityscanner.cve;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.stream.XMLStreamException;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.runners.MockitoJUnitRunner;
import org.xml.sax.SAXException;

import com.amazonaws.starport.vulnerabilityscanner.model.ApplicationModel;
import com.amazonaws.starport.vulnerabilityscanner.model.CveModel;
import com.amazonaws.starport.vulnerabilityscanner.model.NewXmlModel;

@RunWith(MockitoJUnitRunner.class)
public class NewIdentiferTest {
    private NewIdentifier newIdentifier;
    private ParsedInTree cveParser;
    private final String cveid = "CVE-2015-0001";
    private final String xmlFile = "CVEfolder/nvdTest.xml";
    private NewXmlModel parsedXML;
    private List<CveModel> cveReport;

    @Before
    public void setUp() throws Exception {
        // cveParser = Mockito.mock(TestParser.class);
        cveParser = new ParsedInTree();
        newIdentifier = new NewIdentifier(cveParser);
    }

    // make a test case to know what is the output
    @Test
    public void shouldReturnCveIdOfVulnerableApp() throws IOException,
            XMLStreamException, SAXException, ParserConfigurationException {
        final List<ApplicationModel> ImageApp = setImageApp();

        List<NewXmlModel> cveList;
        // Mockito.when(cveParser.parsedCve(xmlFile)).thenReturn(parsedXMLlist);
        cveList = newIdentifier.getCve(ImageApp);
        Assert.assertEquals(cveid, cveList.get(0).getCveId());
    }

    private List<ApplicationModel> setImageApp() {
        final ApplicationModel app1 = new ApplicationModel("aaaa", "08");
        final ApplicationModel app2 = new ApplicationModel("php", "5.5.6");
        final ApplicationModel app3 = new ApplicationModel("videowhisper",
                "7.x1.1");
        final ApplicationModel app4 = new ApplicationModel("rsyslog", "8.2.1");
        final ApplicationModel app5 = new ApplicationModel("88888", "");
        final ApplicationModel app6 = new ApplicationModel("jinja2", "999");
        final ApplicationModel app7 = new ApplicationModel("debian_linux",
                "7.0");
        final ApplicationModel app8 = new ApplicationModel("rsyslog", "8.2.2");
        final ApplicationModel app9 = new ApplicationModel("php", "5.5.7");
        final List<ApplicationModel> appList = new ArrayList<>(Arrays.asList(
                app1, app2, app3, app4, app5, app6, app7, app8, app9));
        return appList;
    }

}
