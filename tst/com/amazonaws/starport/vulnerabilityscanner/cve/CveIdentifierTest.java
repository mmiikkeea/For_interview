package com.amazonaws.starport.vulnerabilityscanner.cve;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.stream.XMLStreamException;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.mockito.runners.MockitoJUnitRunner;
import org.xml.sax.SAXException;

import com.amazonaws.starport.vulnerabilityscanner.model.ApplicationModel;
import com.amazonaws.starport.vulnerabilityscanner.model.CveModel;

@RunWith(MockitoJUnitRunner.class)
public class CveIdentifierTest {
    private Identifier cveIdentifier;
    private Parser cveParser;
    private final String cveId = "CVE-2016-0001";
    private final String xmlFile = "CVEfolder/nvdcve-2.0-2014-partial.xml";
    private CveModel parsedXML;

    @Before
    public void setUp() throws Exception {
        cveParser = Mockito.mock(Parser.class);
        cveIdentifier = new Identifier(cveParser);
    }

    @Test
    public void shouldReturnVulnerableApp() throws IOException,
            XMLStreamException, SAXException, ParserConfigurationException {

        parsedXML = setParsingXml("bash", "2.0");
        final String imageOS = "ubuntu";
        final ApplicationModel app = new ApplicationModel("bash", "2.0");
        final List<CveModel> parsedXMLlist = new ArrayList<>();
        parsedXMLlist.add(parsedXML);
        List<CveModel> cveList = new ArrayList<>();
        Mockito.when(cveParser.parsedCve(xmlFile)).thenReturn(parsedXMLlist);
        cveList = cveIdentifier.getCve(app, imageOS);
        Assert.assertEquals(cveId, cveList.get(0).getCveId());
    }

    @Test
    public void shouldReturnNoCVEforSafeAppTest() throws IOException,
            XMLStreamException, SAXException, ParserConfigurationException {
        final CveModel parsedXML = setParsingXml("mysql", "2.0");
        final ApplicationModel app = new ApplicationModel("php", "2.0");
        final List<CveModel> parsedXMLlist = new ArrayList<>();
        parsedXMLlist.add(parsedXML);
        List<CveModel> cveList;
        Mockito.when(cveParser.parsedCve(xmlFile)).thenReturn(parsedXMLlist);
        final String imageOS = null;
        cveList = cveIdentifier.getCve(app, imageOS);
        final int expectedZero = 0;
        Assert.assertEquals(expectedZero, cveList.size());
    }

    public CveModel setParsingXml(final String app, final String version) {
        final ApplicationModel cveApp = new ApplicationModel(app, version);
        final List<ApplicationModel> cveAppList = new ArrayList<>();
        cveAppList.add(cveApp);
        final String summary = "/" + app + "/";
        final List<String> os = new ArrayList<>();
        final String score = "4.5";
        final CveModel parsedXML = new CveModel(cveId, cveAppList, summary, os,
                score);
        return parsedXML;
    }
}
