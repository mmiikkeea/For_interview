package com.amazonaws.starport.vulnerabilityscanner.cve;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.stream.XMLStreamException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import com.amazonaws.starport.vulnerabilityscanner.model.ApplicationModel;
import com.amazonaws.starport.vulnerabilityscanner.model.CveModel;

public class Parser {
    private static final String ENTRY = "entry";
    private static final String VULN_PRODUCT = "vuln:product";
    private static final String CVSS_SCORE = "cvss:score";
    private static final String SUMMARY = "vuln:summary";

    public List<CveModel> parsedCve(final String fileName)
            throws XMLStreamException, SAXException, IOException,
            ParserConfigurationException {
        final List<CveModel> parsedCveList = new ArrayList<>();
        final DocumentBuilderFactory dbFactory = DocumentBuilderFactory
                .newInstance();
        final Document doc = dbFactory.newDocumentBuilder().parse(
                new File(fileName));
        doc.getDocumentElement().normalize();
        final NodeList entryNodes = doc.getElementsByTagName(ENTRY);
        for (int i = 0; i < entryNodes.getLength(); i++) {
            CveModel parsedXml;
            final Node entryNode = entryNodes.item(i);
            final Element cveIdElement = (Element) entryNode;
            final String cveId = cveIdElement.getAttribute("id");
            final List<String> osList = addOStoCVE(cveIdElement
                    .getElementsByTagName(VULN_PRODUCT));
            try {
                final List<ApplicationModel> appList = addAppToCVE(cveIdElement
                        .getElementsByTagName(VULN_PRODUCT));
                final String score = cveIdElement
                        .getElementsByTagName(CVSS_SCORE).item(0)
                        .getTextContent();
                final String summary = cveIdElement
                        .getElementsByTagName(SUMMARY).item(0).getTextContent();
                parsedXml = new CveModel(cveId, appList, summary, osList, score);
            } catch (final Exception e) {
                continue;
            }
            parsedCveList.add(parsedXml);
        }
        return parsedCveList;
    }

    private static List<String> addOStoCVE(final NodeList appNodeList) {
        final List<String> osList = new ArrayList<>();
        for (int i = 0; i < appNodeList.getLength(); i++) {
            final String vulnProduct = appNodeList.item(i).getTextContent();
            if (vulnProduct.startsWith("cpe:/o")) {
                osList.add(vulnProduct);
            }
        }
        return osList;
    }

    private static List<ApplicationModel> addAppToCVE(final NodeList appNodeList) {
        final List<ApplicationModel> appList = new ArrayList<>();
        for (int i = 0; i < appNodeList.getLength(); i++) {
            final String vulnProduct = appNodeList.item(i).getTextContent();
            if (vulnProduct.startsWith("cpe:/a")) {
                if (vulnProduct.split(":").length < 4) {
                    final ApplicationModel app = new ApplicationModel(
                            vulnProduct.split(":")[3], "");
                    appList.add(app);
                } else {
                    final ApplicationModel app = new ApplicationModel(
                            vulnProduct.split(":")[3],
                            vulnProduct.split(":")[4]);
                    appList.add(app);
                }
            }
        }
        return appList;
    }
}