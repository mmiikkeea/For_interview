package com.amazonaws.starport.vulnerabilityscanner.cve;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

public class CveDownload {
    private static final int BUFFER_SIZE = 4096;
    static String saveDir = "CVEfolder";

    public List<String> downloadFile(final String[] fileURL) throws IOException {
        final ArrayList<String> filenameArray = new ArrayList<>();

        for (int i = 0; i < fileURL.length; i++) {
            final URL url = new URL(fileURL[i]);
            final HttpURLConnection httpConn = (HttpURLConnection) url
                    .openConnection();
            final int responseCode = httpConn.getResponseCode();
            if (responseCode == HttpURLConnection.HTTP_OK) {
                String fileName = "";
                final String disposition = httpConn
                        .getHeaderField("Content-Disposition");
                if (disposition != null) {
                    // extracts file name from header field
                    final int index = disposition.indexOf("filename=");
                    if (index > 0) {
                        fileName = disposition.substring(index + 10,
                                disposition.length() - 1);
                    }
                } else {
                    // extracts file name from URL
                    fileName = fileURL[i].substring(
                            fileURL[i].lastIndexOf("/") + 1,
                            fileURL[i].length());
                }
                System.out.println("fileName = " + fileName);
                // store filename
                filenameArray.add(fileName);
                final InputStream inputStream = httpConn.getInputStream();
                final String saveFilePath = saveDir + File.separator + fileName;
                // opens an output stream to save into file
                try {
                    final FileOutputStream outputStream = new FileOutputStream(
                            saveFilePath);
                    int bytesRead = -1;
                    final byte[] buffer = new byte[BUFFER_SIZE];
                    while ((bytesRead = inputStream.read(buffer)) != -1) {
                        outputStream.write(buffer, 0, bytesRead);
                    }
                    outputStream.close();
                    inputStream.close();
                    System.out.println("File downloaded");
                } catch (final IOException e) {
                    e.printStackTrace();
                }
            } else {
                System.out
                        .println("No file to download. Server replied HTTP code: "
                                + responseCode);
            }
            httpConn.disconnect();
        }
        return unZip(filenameArray);
    }

    public static List<String> unZip(final ArrayList<String> unzipList) {
        final byte[] buffer = new byte[1024];
        final List<String> fileList = new ArrayList<String>();
        for (final String filename : unzipList) {
            try {
                final ZipInputStream zipInputStream = new ZipInputStream(
                        new FileInputStream(saveDir + "/" + filename));
                ZipEntry zipEntry = zipInputStream.getNextEntry();
                while (zipEntry != null) {
                    final String fileName = zipEntry.getName();
                    final File newFile = new File(saveDir + "/"
                            + File.separator + fileName);
                    if (new File(newFile.getParent()).mkdirs()) {
                        throw new FileNotFoundException(
                                "unable to create folder");
                    }
                    final FileOutputStream fileOutputStream = new FileOutputStream(
                            newFile);
                    int len;
                    while ((len = zipInputStream.read(buffer)) > 0) {
                        fileOutputStream.write(buffer, 0, len);
                    }
                    fileOutputStream.close();
                    zipEntry = zipInputStream.getNextEntry();
                }
                zipInputStream.closeEntry();
                zipInputStream.close();
                fileList.add(filename.substring(0, 19));
            } catch (final IOException ex) {
                ex.printStackTrace();
            }
        }
        return fileList;
    }
}
