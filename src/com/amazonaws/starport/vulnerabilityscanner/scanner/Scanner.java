package com.amazonaws.starport.vulnerabilityscanner.scanner;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.stream.XMLStreamException;

import lombok.NonNull;

import org.xml.sax.SAXException;

import com.amazonaws.starport.vulnerabilityscanner.cve.Identifier;
import com.amazonaws.starport.vulnerabilityscanner.cve.Parser;
import com.amazonaws.starport.vulnerabilityscanner.model.ApplicationModel;
import com.amazonaws.starport.vulnerabilityscanner.model.CveModel;
import com.amazonaws.starport.vulnerabilityscanner.testdata.LayerAppData;

/*
 * https://w.amazon.com/index.php/Coral/Config/Integration
 * solution of configfarm not foud
 */

public class Scanner {

    @NonNull
    private static FrontendServiceWrapper frontendService = new FrontendServiceWrapper();
    private static LayerAppData layerAppData = new LayerAppData();
    @NonNull
    private static LayerRepository layerRepository = new LayerRepository(
            layerAppData);
    private static Parser cveParser = new Parser();
    @NonNull
    private static Identifier cveIdentifier = new Identifier(cveParser);
    static boolean dateFlag = true;
    final List<ApplicationModel> applications = new ArrayList<>();

    public Scanner(final FrontendServiceWrapper frontendService,
            final LayerRepository layerRepository,
            final Identifier cveIdentifier) {
    }

    public static void main(final String args[]) throws IOException,
            XMLStreamException, SAXException, ParserConfigurationException {
        final Scanner scanner = new Scanner(frontendService, layerRepository,
                cveIdentifier);
        System.out.println(scanner.getCVEForImage(args[0], args[1], args[2]));
        // "mysql0703",
        // "sha256:439f0491b0b116bd9f0cf648f932d37aaf892b396299c4652fb9567d4c529317",

    }

    public List<CveModel> getCVEForImage(final String imageDigest,
            final String repo, final String registryId) throws IOException,
            XMLStreamException, SAXException, ParserConfigurationException {
        final String imageOS = layerRepository.getOS(imageDigest);
        final List<CveModel> cveForLayers = new ArrayList<CveModel>();
        final List<String> layerDigests = frontendService.getLayerByImage(
                imageDigest, repo, registryId);
        final HashMap<String, List<CveModel>> layerCveMap = new HashMap<>();
        for (final String layerDigest : layerDigests) {
            final List<CveModel> cveForLayer = getCVEforLayer(layerDigest,
                    imageOS);
            cveForLayers.addAll(cveForLayer);
            layerCveMap.put(layerDigest, cveForLayer);
        }
        getReport(layerCveMap, imageDigest);

        return cveForLayers;
    }

    private List<CveModel> getCVEforLayer(final String layerDigest,
            final String imageOs) throws IOException, XMLStreamException,
            SAXException, ParserConfigurationException {
        final List<CveModel> cveReport = new ArrayList<>();
        for (final ApplicationModel application : layerRepository
                .getAppForLayer(layerDigest)) {
            final List<CveModel> cveId = cveIdentifier.getCve(application,
                    imageOs);
            cveReport.addAll(cveId);
            if (!cveId.isEmpty()) {
                applications.add(application);
            }
        }

        return cveReport;
    }

    // should figure out a way to put all layer and cve info together
    public static void getReport(
            final HashMap<String, List<CveModel>> layerCveMap,
            final String imageDigest) throws IOException {
        final Date date = new Date();
        final SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        final File file = new File("Report" + dateFormat.format(date) + ".txt");

        // final FileWriter report = new FileWriter(file.getName(), true);
        final BufferedWriter bufferWritter = new BufferedWriter(
                new OutputStreamWriter(new FileOutputStream(file), "UTF-8"));

        bufferWritter.write("Scanning at: " + date.toString());
        bufferWritter.newLine();

        bufferWritter.write("The Image digest: " + imageDigest);
        bufferWritter.newLine();
        bufferWritter.write("------------------------");
        bufferWritter.newLine();

        for (final Map.Entry<String, List<CveModel>> entry : layerCveMap
                .entrySet()) {
            final String layer = entry.getKey();
            final List<CveModel> cves = layerCveMap.get(layer);
            bufferWritter.newLine();

            bufferWritter.write("The layer digest: " + layer);
            bufferWritter.newLine();
            bufferWritter.write("The applications in this layer: "
                    + layerAppData.getData(layer));

            for (final CveModel cve : cves) {
                bufferWritter.newLine();
                bufferWritter.write("CVE ID: " + cve.getCveId());
                bufferWritter.newLine();
                bufferWritter.write("Score: " + cve.getScore());
                bufferWritter.newLine();
                bufferWritter.write("Summary: " + cve.getSummary());
                bufferWritter.newLine();
            }
        }
        bufferWritter.close();
    }
}