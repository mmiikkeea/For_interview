package com.amazonaws.starport.vulnerabilityscanner.scanner;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutionException;

import balsa.internal.codehaus.jackson.JsonFactory;
import balsa.internal.codehaus.jackson.JsonParseException;
import balsa.internal.codehaus.jackson.JsonParser;
import balsa.internal.codehaus.jackson.JsonToken;

import com.amazon.coral.client.ClientBuilder;
import com.amazon.coral.service.Identity;
import com.amazonaws.starport.frontend.AmazonEC2ContainerRegistry_V20150921Client;
import com.amazonaws.starport.frontend.BatchGetImageRequest;
import com.amazonaws.starport.frontend.BatchGetImageResponse;
import com.amazonaws.starport.frontend.Image;
import com.amazonaws.starport.frontend.ImageIdentifier;
import com.amazonaws.starport.frontend.impl.BatchGetImageCall;

public class FrontendServiceWrapper {

    // @NonNull
    // public static void main(final String args[]) throws InterruptedException,
    // IOException, ExecutionException {
    // final FrontendServiceWrapper mm = new FrontendServiceWrapper();
    // mm.getLayerByImage(
    // "sha256:439f0491b0b116bd9f0cf648f932d37aaf892b396299c4652fb9567d4c529317",
    // "mysql0703");
    // }

    public List<String> getLayerByImage(final String imageDigest,
            final String repository, final String registryId)
            throws JsonParseException, IOException {
        String imageManifest = null;
        try {
            imageManifest = getImageManifest(imageDigest, repository,
                    registryId);
        } catch (final InterruptedException e) {
            e.printStackTrace();
        } catch (final ExecutionException e) {
            e.printStackTrace();
        }
        return getLayerInManifest(imageManifest);
    }

    private static ClientBuilder clientBuilder = new ClientBuilder();

    // registry 302181789483
    public String getImageManifest(final String imageDigest,
            final String repositoryName, final String registryId)
            throws InterruptedException, ExecutionException,
            JsonParseException, IOException {

        final List<ImageIdentifier> imageIds = new ArrayList<>();
        final ImageIdentifier imageIdentifier = new ImageIdentifier();
        imageIdentifier.setImageDigest(imageDigest);
        imageIds.add(imageIdentifier);
        final BatchGetImageRequest input = BatchGetImageRequest.builder()
                .withImageIds(imageIds).withRepositoryName(repositoryName)
                .withRegistryId(registryId).build();
        final BatchGetImageResponse response = getResponse(input);
        return response.getImages().stream().findFirst()
                .map(Image::getImageManifest).get();
    }

    private BatchGetImageResponse getResponse(final BatchGetImageRequest input)
            throws InterruptedException, ExecutionException {
        final ClientBuilder clientBuilder = new ClientBuilder();

        final AmazonEC2ContainerRegistry_V20150921Client frontendServiceClient = newClient("Base.prod.us-west-2");
        final Identity identity = new Identity();
        identity.setAttribute(Identity.AWS_ACCESS_KEY, "AKIAIC55IZ4AAHPUKWBQ");
        identity.setAttribute(Identity.AWS_SECRET_KEY,
                "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");
        final BatchGetImageCall newBatchGetImageCall = frontendServiceClient
                .newBatchGetImageCall();
        newBatchGetImageCall.setIdentity(identity);
        return newBatchGetImageCall.apply(input).get();
    }

    private AmazonEC2ContainerRegistry_V20150921Client newClient(
            final String qualifier) {
        return clientBuilder
                .remoteOf(AmazonEC2ContainerRegistry_V20150921Client.class)
                .withConfiguration(qualifier).newClient();
    }

    public static List<String> getLayerInManifest(final String input)
            throws JsonParseException, IOException {
        final JsonFactory factory = new JsonFactory();
        final JsonParser parser = factory.createJsonParser(input);
        final List<String> layerList = new ArrayList<>();
        while (!parser.isClosed()) {
            JsonToken jsonToken = parser.nextToken();
            if (JsonToken.FIELD_NAME.equals(jsonToken)) {
                final String fieldName = parser.getCurrentName();
                jsonToken = parser.nextToken();
                if ("blobSum".equals(fieldName)) {
                    if (!layerList.contains(parser.getText())) {
                        layerList.add(parser.getText());
                    }
                }
            }
        }

        return layerList;
    }
}
